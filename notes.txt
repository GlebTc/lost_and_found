1. Django

    - Create Virtual Environment
        python3 -m venv venv
    - Install packages
        pip install djangorestframework psycopg2-binary python-dotenv pyjwt django-cors-headers pyjwt
    - Start Django Project
        django-admin startproject lost_found_project
    - Start Apps
        python manage.py startapp app_name
    - Update settings.py to include all newly created and installed apps.

2. Supabase

    - Create new project and obtain the following for .env
        DB_NAME=postgres
        DB_USER=postgres
        DB_PASSWORD=password_generated_when_creating_prohect
        DB_HOST=db_url but switch https:// with db.
        DB_PORT=5432
    - Migrate the changes
        python manage.py migrate

3. Authentication/authorization structure
    - Registration:
        - Front end sends request to Django with email and password.
        - Backend receives data and creates an authentication entry with supabase.  Supabase ONLY handles authorization (creating and deleting new accounts).  The rest is handled by Profile table.

4. The user will have a use Authentication in supabase auth but will also have a profile model generated by Django.

5. Supabase has three levels of JWT: anon, service role, user
6. JWKS (JSON Web Key Sets)


When a token is created, they contain a keys object, which contains the kid to be used and the corresponding "n" and "e" values.  The db service such as supabase will rotate the key values.  When JWT verification is sent, the heading first uses keys.kid value to match with appropriate key.  Once the appropriate key is found, the "n" and "e" values are used to decode JWT verification.


===============================================================COMMON COMMANDS==================================================================
- source venv/bin/activate
- python manage.py runserver
- git checkout -b new_branch
- git push -u origin your-branch-name
- git pull origin main
- tree -L 3
- python manage.py makemigrations
- python manage.py migrate


===============================================================COMMON ERRORS====================================================================
- Issue with decoding a JWT with supabse SUPABASE_SECRET_JWT - The SUPABASE_SECRET_JWT was designed to verify a JWT token but in 2024-2025 it has been switched to only apply to backend generated jwt, not the supabase provided ones.
(https://github.com/supabase/auth/pull/295)
- Understand the difference between search aprams and path params.  The search params are used for filtering, searching, pagination and come after ?.  Path params are part of url structure and are typically used to look for a specifi resource.



===============================================================TO DO===========================================================================
- Check why we are not validating jwt for auth, currently set up to be options={"verify_signature": False}
-  Check all the requests with access_token to ensure the token is obtained from "Authoriztion" header, rather than the body of request.
-  COMPELTED - Complete individual get requests for locations.  Site request should contain a json file containing all buildings, levels and departments.
-  Possibly secure all requests with JWT.  Currently, get all and get individual routes are not protected.
-  Check the API url structure, maybe change it to locations/site/building/level
-  Replace get_requestor_role with get_profile_details
-  Currently CORS settings are lax to allow for development testing:
    - In settings.py, check all the CORS settings
    - In auth_views.py samesite='Lax'
- Add cookies/jwt timeout (12 hours)
- Check on different levels of validation ( models, serializers)



===============================================================COMMIT NOTES=====================================================================
Started Convertinf FBV to CBV

1.  Added CSRF View that is used by front end to obtain CSRF token prior to other calls.
2.  Modified auth_views from FBV to CBV
3.  Created a csrf hook on front end that is used prior to other calls.
4.  Added csrf to login call from frontend

Q.A.  Attempt to login using provided credentials, the login should be successful.  Loggin notes added to console.
