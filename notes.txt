1. Django

    - Create Virtual Environment
        python3 -m venv venv
    - Install packages
        pip install djangorestframework psycopg2-binary python-dotenv pyjwt django-cors-headers pyjwt
    - Start Django Project
        django-admin startproject lost_found_project
    - Start Apps
        python manage.py startapp app_name
    - Update settings.py to include all newly created and installed apps.

2. Supabase

    - Create new project and obtain the following for .env
        DB_NAME=postgres
        DB_USER=postgres
        DB_PASSWORD=password_generated_when_creating_prohect
        DB_HOST=db_url but switch https:// with db.
        DB_PORT=5432
    - Migrate the changes
        python manage.py migrate

3. Authentication/authorization structure
    - Registration:
        - Front end sends request to Django with email and password.
        - Backend receives data and creates an authentication entry with supabase.
        - Backend also creates an authorization entry in the custom "Profile" table.  This allows for adiitional user information such as roles, name, avatar link, etc...

4. The user will have a use Authentication in supabase auth but will also have a profile model generated by Django.



===============================================================COMMON COMMANDS==================================================================
- source venv/bin/activate
- python manage.py runserver
- git checkout -b new_branch
- git push -u origin new_branch
- tree -L -3
- python manage.py makemigrations
- python manage.py migrate

===============================================================COMMON ERRORS====================================================================
- Issue with decoding a JWT with supabse SUPABASE_SECRET_JWT - The SUPABASE_SECRET_JWT was designed to verify a JWT token but in 2024-2025 it has been switched to only apply to backend generated jwt, not the supabase provided ones.
(https://github.com/supabase/auth/pull/295)



===============================================================TO DO===========================================================================
- Check all the requests with access_token to ensure the token is obtained from "Authoriztion" header, rather than the body of request.


===============================================================COMMIT NOTES=====================================================================
Added Get All Users API

1.  Created /progiles/ url
2.  Created a view to get list of all users.
    - Decodes jwt to get user data and see if user has admin role.
    - if role is admin, send request for all users data.

Q.A.
Submit a GET request to http://localhost:8000/api/accounts/profiles/, provide JWT as "Authorization" Bearer token.
Should return a list of all users with details from profile table
